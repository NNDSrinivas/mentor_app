# Environment configuration for Wave 5 - Copy to .env and fill in your values

# === Flask Server Configuration ===
FLASK_HOST=0.0.0.0
FLASK_PORT=8081
FLASK_DEBUG=false
WS_PORT=8001

# === Safety Configuration ===
DRY_RUN=true  # KEEP TRUE UNTIL READY! Prevents actual API calls

# === Jira Integration (least privilege) ===
JIRA_BASE_URL=https://your-domain.atlassian.net
JIRA_USER=your-email@company.com
JIRA_TOKEN=your-api-token-with-issue-scope

# === GitHub Integration (least privilege) ===
GITHUB_TOKEN=ghp_your-personal-access-token
GITHUB_API=https://api.github.com
GITHUB_WEBHOOK_SECRET=your-webhook-secret-for-verification

# Required GitHub token scopes:
# - repo:status (read commit status)
# - public_repo OR repo (depending on your repos)
# - pull_requests (read/write PRs) 
# - issues (read/write issues)
# 
# DO NOT use tokens with admin or org-level permissions!

# === OpenAI Configuration (Wave 6) ===
OPENAI_API_KEY=sk-your-openai-api-key-here
OPENAI_MODEL=gpt-4o-mini  # or gpt-4, gpt-3.5-turbo

# === Audit Logging ===
AUDIT_LOG_PATH=./audit.log

# === Database Configuration ===
MENTOR_DB_PATH=./mentor_memory.db
MEMORY_DB_PATH=./memory_db

# === OpenAI Configuration (from previous waves) ===
OPENAI_API_KEY=your-openai-api-key

# === Logging ===
LOG_LEVEL=INFO

# === Webhook URLs (configure in GitHub/Jira) ===
# GitHub webhook URL: https://your-domain.com/webhook/github
# Select events: Pull requests, Issues, Check suites, Workflow runs, Push

# === Security Notes ===
# 1. Use least-privilege tokens (per repo, not org admin)
# 2. Keep DRY_RUN=true until you've tested everything
# 3. Verify webhook signatures in production
# 4. Monitor approval queues for unusual activity
# 5. Set up proper logging and alerting
